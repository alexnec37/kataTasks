using System;
using System.Collections.Generic;
using System.Text;

namespace LikBez
{
    class Question2
    {

        //1. double в памяти хранится в двоичном виде, а значит может отображать точно только те числа, которые являются степенью двойки.В противном случае возникают ошибки округления дробной части. decimal в памяти хранится в десятичном виде, потому с абсолютной точностью может отображать дробные части числа.
        //Decimal нужен там, где важна дробная часть. Например, при работе с финансами.
        //2. Double в памяти занимает 64 бита, а decimal - 128 бит.
        //3. У double больший диапазон чисел: http://www.cyberforum.ru/cgi-bin/latex.cgi?\pm (~{10}^{-324};{10}^{308)} против http://www.cyberforum.ru/cgi-bin/latex.cgi?\pm (~{10}^{-28};{10}^{28}) у decimal.
        //4. При этом, у double меньшая точность дробной части (15-16 цифр после запятой против 28-29 цифр у decimal).
        //5. У double есть особые значения: +0, -0, http://www.cyberforum.ru/cgi-bin/latex.cgi?+\infty, http://www.cyberforum.ru/cgi-bin/latex.cgi?-\infty, NaN. У decimal ничего подобного нет.
        //6. Double - нативный тип для процессора.Decimal - нет, потому операции с ним где-то в десять раз медленнее, чем с double.
        // Double.NaN, Double.NegativeInfinity и Double.PositiveInfinity.

        /*
        Опять же, число и местоположение точки decimal кодируются в пределах значения – это то, 
        что делает decimal все еще типом с плавающей точкой вместо типа с фиксированной точкой.

        Важно отметить, что люди привыкли представлять нецелые числа в форме decimal и ожидают 
        точных результатов в представлениях decimal; не все числа decimal точно представимы в 
        двоичной плавающей точке – 0.1, например, – поэтому, если вы используете двоичное значение с 
        плавающей точкой, вы фактически получите приближение к 0.1. Вы все равно получите аппроксимации и 
        при использовании плавающей точки decimal – например, результат деления 1 на 3 не может быть точно представлен.

        Что касается того, что использовать, когда:

            Для значений, которые являются "naturally exact decimals", хорошо использовать decimal . 
            Это обычно подходит для любых концепций, придуманных людьми: финансовые ценности - самый очевидный пример, 
            но есть и другие.Возьмем, к примеру, баллы, полученные дайверами или конькобежцами.

            Для значений, которые являются более артефактами природы, которые в любом случае не могут быть точно измерены, 
            float / double являются более подходящими. Например, научные данные обычно представляются в такой форме.
            Здесь исходные значения не будут "decimally accurate" для начала, поэтому для ожидаемых результатов не 
            важно поддерживать "decimal accuracy". С плавающими двоичными точками работать гораздо быстрее, 
            чем с десятичными дробями.
        */
    }
}
